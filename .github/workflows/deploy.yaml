name: Build and Deploy to GKE

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # Optional but Recommended: Add permissions for Workload Identity Federation (most secure)
    # If using WIF, you won't need the GCP_SA_KEY secret.
    # permissions:
    #   contents: 'read'
    #   id-token: 'write'

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Authenticate to Google Cloud (Replaces old Step 2 & 3)
    # Use google-github-actions/auth action for robust authentication
    - id: 'auth'
      uses: 'google-github-actions/auth@v1' # Use specific version (e.g., v1)
      with:
        # Option 1: Using the Service Account Key JSON (Your current method)
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

        # Option 2: Using Workload Identity Federation (Recommended, more secure, keyless)
        # Remove 'credentials_json' above and uncomment these lines if using WIF
        # workload_identity_provider: 'projects/YOUR_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID'
        # service_account: 'your-service-account-email@your-project-id.iam.gserviceaccount.com'

    # Step 3: Get GKE Credentials (uses the authentication from the previous step)
    # No need to explicitly set project ID with 'gcloud config set' anymore,
    # as the 'auth' action usually handles it, but 'get-gke-credentials' still needs it.
    - name: Get GKE Credentials
      # Ensure you use a specific version like v1
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ secrets.CLUSTER_NAME }}
        location: ${{ secrets.ZONE }}      # Make sure this is correct (zone or region)
        project_id: ${{ secrets.PROJECT_ID }} # Needs to match the project associated with your SA key or WIF setup

    # Step 4: Verify Kubernetes Cluster connection
    - name: Verify Kubernetes Cluster
      run: |
        echo "Current kubectl context:"
        kubectl config current-context
        echo "Nodes in the cluster:"
        kubectl get nodes
    # # Step 4: Authenticate Docker to Docker Hub (instead of GCR)
    # - name: Authenticate Docker to Docker Hub
    #   run: |
    #     echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin


    # # Step 5: Build and push Docker image to Docker Hub
    # - name: Build and push Docker image
    #   run: |
    #     IMAGE=docker.io/${{ secrets.DOCKER_USERNAME }}/hello-world-node:latest
    #     docker build -t $IMAGE .
    #     docker push $IMAGE

    # # Step 6: Install and configure kubectl using gcloud
    # - name: Install and configure kubectl
    #   run: |
    #     gcloud components install kubectl
    #     gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.ZONE }} --project ${{ secrets.PROJECT_ID }}

    # Step 6: Get GKE credentials and deploy to GKE
    #- name: Get GKE credentials
    #  run: |
    #    gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.ZONE }} --project ${{ secrets.PROJECT_ID }}

    # Step 7: Update the Kubernetes deployment with the new Docker image
    #- name: Deploy to GKE
    #  run: |
    #    kubectl set image deployment/YOUR_DEPLOYMENT_NAME YOUR_CONTAINER_NAME=docker.io/YOUR_USERNAME/YOUR_APP_NAME:latest
    #    kubectl rollout status deployment/YOUR_DEPLOYMENT_NAME
