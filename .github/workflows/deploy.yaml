name: Build and Deploy to GKE

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

env:
  # Define reusable environment variables
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.CLUSTER_NAME }}
  GKE_LOCATION: ${{ secrets.ZONE }} # Use ZONE or REGION as appropriate for your cluster
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/hello-world-node # Replace 'hello-world-node' with your actual app image name
  K8S_DEPLOYMENT: ${{ secrets.K8S_DEPLOYMENT_NAME }}
  K8S_CONTAINER: ${{ secrets.K8S_CONTAINER_NAME }} 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # Optional but Recommended: Add permissions for Workload Identity Federation (most secure)
    # If using WIF, you won't need the GCP_SA_KEY secret.
    # permissions:
    #   contents: 'read'
    #   id-token: 'write'

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Authenticate to Google Cloud
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        # Using Service Account Key JSON
        credentials_json: '${{ secrets.GCP_SA_KEY }}' 
        # --- OR ---
        # Using Workload Identity Federation (Recommended)
        # workload_identity_provider: 'projects/YOUR_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID'
        # service_account: 'your-service-account-email@your-project-id.iam.gserviceaccount.com'

    # Step 3: Get GKE Credentials for kubectl
    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_LOCATION }}
        project_id: ${{ env.PROJECT_ID }}

    # Step 4: Authenticate Docker to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2 # Use dedicated action for robustness
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 5: Build and push Docker image to Docker Hub
    - name: Build and Push Docker Image
      run: |
        # Generate a unique tag based on the commit SHA
        IMAGE_TAG=${{ github.sha }}
        FULL_IMAGE_NAME="docker.io/${{ env.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}"
        LATEST_IMAGE_NAME="docker.io/${{ env.DOCKER_IMAGE_NAME }}:latest"

        echo "Building image: ${FULL_IMAGE_NAME}"
        docker build -t "${FULL_IMAGE_NAME}" -t "${LATEST_IMAGE_NAME}" .

        echo "Pushing image with tag: ${IMAGE_TAG}"
        docker push "${FULL_IMAGE_NAME}"

        echo "Pushing image with tag: latest"
        docker push "${LATEST_IMAGE_NAME}"

        # Store the full image name with SHA tag for the deployment step
        echo "IMAGE_TO_DEPLOY=${FULL_IMAGE_NAME}" >> $GITHUB_ENV

    # Step 6: Deploy to GKE by updating the image
    - name: Deploy to GKE
      run: |
        echo "Updating deployment '${{ env.K8S_DEPLOYMENT }}' container '${{ env.K8S_CONTAINER }}' with image '${{ env.IMAGE_TO_DEPLOY }}'"
        kubectl set image deployment/${{ env.K8S_DEPLOYMENT }} ${{ env.K8S_CONTAINER }}=${{ env.IMAGE_TO_DEPLOY }} --record # --record adds annotation for rollout history

        echo "Waiting for rollout to complete..."
        kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT }} --timeout=5m # Adjust timeout as needed

